
## R-Code for the processing of variables ##
********************************************

-> Additional file to load related to functions: functions.R  	(available in folder)

-> Additional file for instructions:	       Read Me		(available in folder)

IMPORTANT: <...> means user is required to replace paths as instructed

------------------------------------------------------------------------------------------

## Setting Directory and Loading Functions ##

1) To set working directory:

-> setwd("<working_dir_file_path>")					

   (insert [a] file path for working directory - main folder from Dryad)
	

2) To load functions file associated with attributes processing:

-> source("R_functions\\functions.R")		

	
3) To run function associated with the loading of required R-packages  
	
-> load_packages()


## Loading Raster File ##

4) To load any raster (.tif) file into R

-> <input_file_name> <- terra::rast("<folder_name_of_attribute>\\<folder_name_of_data_category>\\<file_name>.tif")

   (insert [a] input file name, [b] folder name of attribute, [c] folder name of data category, and [d] file name)  

   e.g. precipitation_working_2020_Jan <- terra::rast("3. Precipitation\\03. Working Data\\precipitation_working_2020_1.tif")


## Loading Vector File ##

5) To load vector file (.shp) containing Amazon region boundary

-> <input_file_name> <- terra::vect("0. Amazon_shapefile\\projected\\amazon_shp_projected.shp")

   (insert [a] input file name)  

   e.g. vect <- terra::vect("0. Amazon_shapefile\\projected\\amazon_shp_projected.shp")
		
------------------------------------------------------------------------------------------


## Code Related to Processing of Variables (except Land Cover and Elevation) ##

vect <- terra::vect("0. Amazon_shapefile\\projected\\amazon_shp_projected.shp")

for (year in 2001:2020){
  print(year)
  
  for (month in 1:12) {
    print(month)  
    
    rast <- terra::rast(paste("<folder_name_of_attribute>\\02. Pre-Processed Data\\<file_name>.tif", sep=""))
    
    rast_crop = crop(rast, vect)     
     
    spat_grid <- <function_name_associated_with_attribute>(rast_crop, vect)
    
    terra::writeRaster(spat_grid, paste("<folder_name_of_attribute>\\03. Working Data\\<file_name>".tif", sep=""), overwrite=TRUE)
    
  }
}

------------------------------------------------------------------------------------------


## Related to Processing of Land Cover ##

-> In case of Land Cover which is yearly data. Nested loops were adjusted to read data yearly (instead of monthly)

vect <- terra::vect("0. Amazon_shapefile\\projected\\amazon_shp_projected.shp")

for (year in 2001:2020){
  print(year)

    rast <- terra::rast(paste("2. Land Cover\\02. Pre-Processed Data\\<file_name>.tif", sep=""))
    
    rast_crop = crop(rast, vect)     
     
    spat_grid <- lulc_to_spat_grid(rast_crop, vect)
  
    for (month in 1:12) {
      print(month)  

    terra::writeRaster(spat_grid, paste("2. Land Cover\\03. Working Data\\<file_name>".tif", sep=""), overwrite=TRUE)        
  }
}

------------------------------------------------------------------------------------------


## Related to Processing of Elevation ##

-> In case of Elevation which is a one-time data. Following code is followed:

#To load Vector file
vect <- terra::vect("0. Amazon_shapefile\\projected\\amazon_shp_projected.shp")

#To load Raster file
rast_elevation <- terra::rast("5. Elevation\\02. Pre-Processed Data\\elevation_preproc.tif")

#To crop Raster file to the Amazon region
rast_elevation_crpd = crop(rast_elevation,vect)

# To get empty Spatial grid
spat_grid_elevation <- get_empty_grid(vect)

#To dis-aggregate input raster to a resolution of 500m
rast_elevation_crpd_disagg <- terra::disagg(rast_elevation_crpd, fact=c(2,2))

#To transfer (re-sample) values from dis-aggregated input raster to the spatial grid 
spat_grid_elevation_val <- terra::resample(rast_elevation_crpd_disagg, spat_grid_elevation, method='bilinear')

#To write output raster - working data
terra::writeRaster(spat_grid_elevation_val, paste("5. Elevation\\03. Working Data\\elevation_working.tif", sep=""), overwrite=TRUE)

------------------------------------------------------------------------------------------


## Additional data transformation related to Soil Moisture ##

-- 'soil_moisture_transform.py' files contain the python code to transform .tif file to correct coordinates using GDAL library





